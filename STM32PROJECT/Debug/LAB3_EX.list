
LAB3_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002978  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa8  08002aa8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa8  08002aa8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa8  08002aa8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000060  08002b10  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002b10  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009868  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af0  00000000  00000000  000298f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d19  00000000  00000000  0002c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba90  00000000  00000000  000434d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082536  00000000  00000000  0004ef61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000d14ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a6c 	.word	0x08002a6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002a6c 	.word	0x08002a6c

0800014c <is_pressed>:

int flag_for_pressed[NUMBER_OF_BUTTON] = {0};
int flag_for_pressed_3s[NUMBER_OF_BUTTON] = {0};


int is_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(index > NUMBER_OF_BUTTON) return 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	dd01      	ble.n	800015e <is_pressed+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <is_pressed+0x2e>
	if(flag_for_pressed[index]){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <is_pressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d006      	beq.n	8000178 <is_pressed+0x2c>
		flag_for_pressed[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <is_pressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <is_pressed+0x2e>
	}
	return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	2000007c 	.word	0x2000007c

08000188 <read_input>:

int register0_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register1_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register2_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int button_buffer[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
void read_input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e05d      	b.n	8000250 <read_input+0xc8>
		register0_key[i] = register1_key[i];
 8000194:	4a32      	ldr	r2, [pc, #200]	; (8000260 <read_input+0xd8>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4931      	ldr	r1, [pc, #196]	; (8000264 <read_input+0xdc>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		register1_key[i] = register2_key[i];
 80001a4:	4a30      	ldr	r2, [pc, #192]	; (8000268 <read_input+0xe0>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	492c      	ldr	r1, [pc, #176]	; (8000260 <read_input+0xd8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	d01f      	beq.n	80001fa <read_input+0x72>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b02      	cmp	r3, #2
 80001be:	dc27      	bgt.n	8000210 <read_input+0x88>
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d003      	beq.n	80001ce <read_input+0x46>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d00b      	beq.n	80001e4 <read_input+0x5c>
			break;
		case 2:
			register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON2_Pin);
			break;
		default:
			break;
 80001cc:	e020      	b.n	8000210 <read_input+0x88>
			 register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON0_Pin);
 80001ce:	2101      	movs	r1, #1
 80001d0:	4826      	ldr	r0, [pc, #152]	; (800026c <read_input+0xe4>)
 80001d2:	f001 fc13 	bl	80019fc <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a23      	ldr	r2, [pc, #140]	; (8000268 <read_input+0xe0>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001e2:	e016      	b.n	8000212 <read_input+0x8a>
			register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON1_Pin);
 80001e4:	2102      	movs	r1, #2
 80001e6:	4821      	ldr	r0, [pc, #132]	; (800026c <read_input+0xe4>)
 80001e8:	f001 fc08 	bl	80019fc <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4619      	mov	r1, r3
 80001f0:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <read_input+0xe0>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001f8:	e00b      	b.n	8000212 <read_input+0x8a>
			register2_key[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON2_Pin);
 80001fa:	2104      	movs	r1, #4
 80001fc:	481b      	ldr	r0, [pc, #108]	; (800026c <read_input+0xe4>)
 80001fe:	f001 fbfd 	bl	80019fc <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	4619      	mov	r1, r3
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <read_input+0xe0>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800020e:	e000      	b.n	8000212 <read_input+0x8a>
			break;
 8000210:	bf00      	nop
		}

		if(register0_key[i] == register1_key[i] && register1_key[i] == register2_key[i]){
 8000212:	4a14      	ldr	r2, [pc, #80]	; (8000264 <read_input+0xdc>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4911      	ldr	r1, [pc, #68]	; (8000260 <read_input+0xd8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d111      	bne.n	800024a <read_input+0xc2>
 8000226:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <read_input+0xd8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	490e      	ldr	r1, [pc, #56]	; (8000268 <read_input+0xe0>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d107      	bne.n	800024a <read_input+0xc2>
			button_buffer[i] = register2_key[i];
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <read_input+0xe0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000242:	490b      	ldr	r1, [pc, #44]	; (8000270 <read_input+0xe8>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3301      	adds	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b02      	cmp	r3, #2
 8000254:	dd9e      	ble.n	8000194 <read_input+0xc>
		}
	}
}
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000018 	.word	0x20000018
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000024 	.word	0x20000024
 800026c:	40010c00 	.word	0x40010c00
 8000270:	20000030 	.word	0x20000030

08000274 <fsm_for_button>:

void fsm_for_button(){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	e057      	b.n	8000330 <fsm_for_button+0xbc>
		switch(state_of_button[i]){
 8000280:	4a2f      	ldr	r2, [pc, #188]	; (8000340 <fsm_for_button+0xcc>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000288:	2b16      	cmp	r3, #22
 800028a:	d03b      	beq.n	8000304 <fsm_for_button+0x90>
 800028c:	2b16      	cmp	r3, #22
 800028e:	dc45      	bgt.n	800031c <fsm_for_button+0xa8>
 8000290:	2b14      	cmp	r3, #20
 8000292:	d002      	beq.n	800029a <fsm_for_button+0x26>
 8000294:	2b15      	cmp	r3, #21
 8000296:	d016      	beq.n	80002c6 <fsm_for_button+0x52>
				state_of_button[i] = BUTTON_RELEASED;
			}

			break;
		default:
			break;
 8000298:	e040      	b.n	800031c <fsm_for_button+0xa8>
			if(button_buffer[i] == BUTTON_IS_PRESSED){
 800029a:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <fsm_for_button+0xd0>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d13c      	bne.n	8000320 <fsm_for_button+0xac>
				flag_for_pressed[i] = 1;
 80002a6:	4a28      	ldr	r2, [pc, #160]	; (8000348 <fsm_for_button+0xd4>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				set_timer(i, 3000);
 80002b0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 fd37 	bl	8000d28 <set_timer>
				state_of_button[i] = BUTTON_PRESSED;
 80002ba:	4a21      	ldr	r2, [pc, #132]	; (8000340 <fsm_for_button+0xcc>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2115      	movs	r1, #21
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002c4:	e02c      	b.n	8000320 <fsm_for_button+0xac>
			if(is_timer_timeout(i)){
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 fd74 	bl	8000db4 <is_timer_timeout>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d009      	beq.n	80002e6 <fsm_for_button+0x72>
				flag_for_pressed_3s[i] = 1;
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <fsm_for_button+0xd8>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2101      	movs	r1, #1
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				state_of_button[i] = BUTTON_PRESSED_3S;
 80002dc:	4a18      	ldr	r2, [pc, #96]	; (8000340 <fsm_for_button+0xcc>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2116      	movs	r1, #22
 80002e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 80002e6:	4a17      	ldr	r2, [pc, #92]	; (8000344 <fsm_for_button+0xd0>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d118      	bne.n	8000324 <fsm_for_button+0xb0>
				clear_timer(i);
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f000 fd32 	bl	8000d5c <clear_timer>
				state_of_button[i] = BUTTON_RELEASED;
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <fsm_for_button+0xcc>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2114      	movs	r1, #20
 80002fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000302:	e00f      	b.n	8000324 <fsm_for_button+0xb0>
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <fsm_for_button+0xd0>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d10b      	bne.n	8000328 <fsm_for_button+0xb4>
				state_of_button[i] = BUTTON_RELEASED;
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <fsm_for_button+0xcc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2114      	movs	r1, #20
 8000316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800031a:	e005      	b.n	8000328 <fsm_for_button+0xb4>
			break;
 800031c:	bf00      	nop
 800031e:	e004      	b.n	800032a <fsm_for_button+0xb6>
			break;
 8000320:	bf00      	nop
 8000322:	e002      	b.n	800032a <fsm_for_button+0xb6>
			break;
 8000324:	bf00      	nop
 8000326:	e000      	b.n	800032a <fsm_for_button+0xb6>
			break;
 8000328:	bf00      	nop
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	dda4      	ble.n	8000280 <fsm_for_button+0xc>



		}
	}
}
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000000 	.word	0x20000000
 8000344:	20000030 	.word	0x20000030
 8000348:	2000007c 	.word	0x2000007c
 800034c:	20000088 	.word	0x20000088

08000350 <turn_on_led_7seg>:
#include "led_7_seg.h"

int led_7_seg_buffer[4] = {0};
int index_led_7_seg = 0;

void turn_on_led_7seg(int index){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b03      	cmp	r3, #3
 800035c:	d85e      	bhi.n	800041c <turn_on_led_7seg+0xcc>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <turn_on_led_7seg+0x14>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000375 	.word	0x08000375
 8000368:	0800039f 	.word	0x0800039f
 800036c:	080003c9 	.word	0x080003c9
 8000370:	080003f3 	.word	0x080003f3
	switch(index){
	case 0:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2108      	movs	r1, #8
 8000378:	4835      	ldr	r0, [pc, #212]	; (8000450 <turn_on_led_7seg+0x100>)
 800037a:	f001 fb56 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2110      	movs	r1, #16
 8000382:	4833      	ldr	r0, [pc, #204]	; (8000450 <turn_on_led_7seg+0x100>)
 8000384:	f001 fb51 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2120      	movs	r1, #32
 800038c:	4830      	ldr	r0, [pc, #192]	; (8000450 <turn_on_led_7seg+0x100>)
 800038e:	f001 fb4c 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2140      	movs	r1, #64	; 0x40
 8000396:	482e      	ldr	r0, [pc, #184]	; (8000450 <turn_on_led_7seg+0x100>)
 8000398:	f001 fb47 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 800039c:	e053      	b.n	8000446 <turn_on_led_7seg+0xf6>
	case 1:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2108      	movs	r1, #8
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <turn_on_led_7seg+0x100>)
 80003a4:	f001 fb41 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	4828      	ldr	r0, [pc, #160]	; (8000450 <turn_on_led_7seg+0x100>)
 80003ae:	f001 fb3c 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2120      	movs	r1, #32
 80003b6:	4826      	ldr	r0, [pc, #152]	; (8000450 <turn_on_led_7seg+0x100>)
 80003b8:	f001 fb37 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	4823      	ldr	r0, [pc, #140]	; (8000450 <turn_on_led_7seg+0x100>)
 80003c2:	f001 fb32 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80003c6:	e03e      	b.n	8000446 <turn_on_led_7seg+0xf6>
	case 2:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4820      	ldr	r0, [pc, #128]	; (8000450 <turn_on_led_7seg+0x100>)
 80003ce:	f001 fb2c 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2110      	movs	r1, #16
 80003d6:	481e      	ldr	r0, [pc, #120]	; (8000450 <turn_on_led_7seg+0x100>)
 80003d8:	f001 fb27 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	481b      	ldr	r0, [pc, #108]	; (8000450 <turn_on_led_7seg+0x100>)
 80003e2:	f001 fb22 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4819      	ldr	r0, [pc, #100]	; (8000450 <turn_on_led_7seg+0x100>)
 80003ec:	f001 fb1d 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80003f0:	e029      	b.n	8000446 <turn_on_led_7seg+0xf6>
	case 3:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	4816      	ldr	r0, [pc, #88]	; (8000450 <turn_on_led_7seg+0x100>)
 80003f8:	f001 fb17 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	4813      	ldr	r0, [pc, #76]	; (8000450 <turn_on_led_7seg+0x100>)
 8000402:	f001 fb12 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2120      	movs	r1, #32
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <turn_on_led_7seg+0x100>)
 800040c:	f001 fb0d 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	480e      	ldr	r0, [pc, #56]	; (8000450 <turn_on_led_7seg+0x100>)
 8000416:	f001 fb08 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 800041a:	e014      	b.n	8000446 <turn_on_led_7seg+0xf6>
	default:
		HAL_GPIO_WritePin( GPIOB, EN0_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2108      	movs	r1, #8
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <turn_on_led_7seg+0x100>)
 8000422:	f001 fb02 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN1_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	4809      	ldr	r0, [pc, #36]	; (8000450 <turn_on_led_7seg+0x100>)
 800042c:	f001 fafd 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN2_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2120      	movs	r1, #32
 8000434:	4806      	ldr	r0, [pc, #24]	; (8000450 <turn_on_led_7seg+0x100>)
 8000436:	f001 faf8 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOB, EN3_Pin, SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2140      	movs	r1, #64	; 0x40
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <turn_on_led_7seg+0x100>)
 8000440:	f001 faf3 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000444:	bf00      	nop
	}
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010c00 	.word	0x40010c00

08000454 <display_led_7seg>:


void display_led_7seg(int number){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b09      	cmp	r3, #9
 8000460:	f200 81b2 	bhi.w	80007c8 <display_led_7seg+0x374>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <display_led_7seg+0x18>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	08000495 	.word	0x08000495
 8000470:	080004e7 	.word	0x080004e7
 8000474:	08000539 	.word	0x08000539
 8000478:	0800058b 	.word	0x0800058b
 800047c:	080005dd 	.word	0x080005dd
 8000480:	0800062f 	.word	0x0800062f
 8000484:	08000681 	.word	0x08000681
 8000488:	080006d3 	.word	0x080006d3
 800048c:	08000725 	.word	0x08000725
 8000490:	08000777 	.word	0x08000777
	switch(number){
	case 0:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	48ce      	ldr	r0, [pc, #824]	; (80007d4 <display_led_7seg+0x380>)
 800049a:	f001 fac6 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	48cc      	ldr	r0, [pc, #816]	; (80007d4 <display_led_7seg+0x380>)
 80004a4:	f001 fac1 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	48c9      	ldr	r0, [pc, #804]	; (80007d4 <display_led_7seg+0x380>)
 80004b0:	f001 fabb 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ba:	48c6      	ldr	r0, [pc, #792]	; (80007d4 <display_led_7seg+0x380>)
 80004bc:	f001 fab5 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	48c3      	ldr	r0, [pc, #780]	; (80007d4 <display_led_7seg+0x380>)
 80004c8:	f001 faaf 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d2:	48c0      	ldr	r0, [pc, #768]	; (80007d4 <display_led_7seg+0x380>)
 80004d4:	f001 faa9 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	48bd      	ldr	r0, [pc, #756]	; (80007d4 <display_led_7seg+0x380>)
 80004e0:	f001 faa3 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80004e4:	e171      	b.n	80007ca <display_led_7seg+0x376>
	case 1:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	48ba      	ldr	r0, [pc, #744]	; (80007d4 <display_led_7seg+0x380>)
 80004ec:	f001 fa9d 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	48b7      	ldr	r0, [pc, #732]	; (80007d4 <display_led_7seg+0x380>)
 80004f6:	f001 fa98 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000500:	48b4      	ldr	r0, [pc, #720]	; (80007d4 <display_led_7seg+0x380>)
 8000502:	f001 fa92 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	48b1      	ldr	r0, [pc, #708]	; (80007d4 <display_led_7seg+0x380>)
 800050e:	f001 fa8c 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	48ae      	ldr	r0, [pc, #696]	; (80007d4 <display_led_7seg+0x380>)
 800051a:	f001 fa86 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000524:	48ab      	ldr	r0, [pc, #684]	; (80007d4 <display_led_7seg+0x380>)
 8000526:	f001 fa80 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	48a8      	ldr	r0, [pc, #672]	; (80007d4 <display_led_7seg+0x380>)
 8000532:	f001 fa7a 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000536:	e148      	b.n	80007ca <display_led_7seg+0x376>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	48a5      	ldr	r0, [pc, #660]	; (80007d4 <display_led_7seg+0x380>)
 800053e:	f001 fa74 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	48a3      	ldr	r0, [pc, #652]	; (80007d4 <display_led_7seg+0x380>)
 8000548:	f001 fa6f 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	48a0      	ldr	r0, [pc, #640]	; (80007d4 <display_led_7seg+0x380>)
 8000554:	f001 fa69 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	489d      	ldr	r0, [pc, #628]	; (80007d4 <display_led_7seg+0x380>)
 8000560:	f001 fa63 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056a:	489a      	ldr	r0, [pc, #616]	; (80007d4 <display_led_7seg+0x380>)
 800056c:	f001 fa5d 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000576:	4897      	ldr	r0, [pc, #604]	; (80007d4 <display_led_7seg+0x380>)
 8000578:	f001 fa57 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4894      	ldr	r0, [pc, #592]	; (80007d4 <display_led_7seg+0x380>)
 8000584:	f001 fa51 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000588:	e11f      	b.n	80007ca <display_led_7seg+0x376>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	4891      	ldr	r0, [pc, #580]	; (80007d4 <display_led_7seg+0x380>)
 8000590:	f001 fa4b 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	488e      	ldr	r0, [pc, #568]	; (80007d4 <display_led_7seg+0x380>)
 800059a:	f001 fa46 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	488b      	ldr	r0, [pc, #556]	; (80007d4 <display_led_7seg+0x380>)
 80005a6:	f001 fa40 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	4888      	ldr	r0, [pc, #544]	; (80007d4 <display_led_7seg+0x380>)
 80005b2:	f001 fa3a 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005bc:	4885      	ldr	r0, [pc, #532]	; (80007d4 <display_led_7seg+0x380>)
 80005be:	f001 fa34 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c8:	4882      	ldr	r0, [pc, #520]	; (80007d4 <display_led_7seg+0x380>)
 80005ca:	f001 fa2e 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d4:	487f      	ldr	r0, [pc, #508]	; (80007d4 <display_led_7seg+0x380>)
 80005d6:	f001 fa28 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80005da:	e0f6      	b.n	80007ca <display_led_7seg+0x376>
	case 4:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	487c      	ldr	r0, [pc, #496]	; (80007d4 <display_led_7seg+0x380>)
 80005e2:	f001 fa22 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	487a      	ldr	r0, [pc, #488]	; (80007d4 <display_led_7seg+0x380>)
 80005ec:	f001 fa1d 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	4877      	ldr	r0, [pc, #476]	; (80007d4 <display_led_7seg+0x380>)
 80005f8:	f001 fa17 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000602:	4874      	ldr	r0, [pc, #464]	; (80007d4 <display_led_7seg+0x380>)
 8000604:	f001 fa11 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4871      	ldr	r0, [pc, #452]	; (80007d4 <display_led_7seg+0x380>)
 8000610:	f001 fa0b 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	486e      	ldr	r0, [pc, #440]	; (80007d4 <display_led_7seg+0x380>)
 800061c:	f001 fa05 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	486b      	ldr	r0, [pc, #428]	; (80007d4 <display_led_7seg+0x380>)
 8000628:	f001 f9ff 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 800062c:	e0cd      	b.n	80007ca <display_led_7seg+0x376>
	case 5:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4868      	ldr	r0, [pc, #416]	; (80007d4 <display_led_7seg+0x380>)
 8000634:	f001 f9f9 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4865      	ldr	r0, [pc, #404]	; (80007d4 <display_led_7seg+0x380>)
 800063e:	f001 f9f4 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4862      	ldr	r0, [pc, #392]	; (80007d4 <display_led_7seg+0x380>)
 800064a:	f001 f9ee 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	485f      	ldr	r0, [pc, #380]	; (80007d4 <display_led_7seg+0x380>)
 8000656:	f001 f9e8 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	485c      	ldr	r0, [pc, #368]	; (80007d4 <display_led_7seg+0x380>)
 8000662:	f001 f9e2 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	4859      	ldr	r0, [pc, #356]	; (80007d4 <display_led_7seg+0x380>)
 800066e:	f001 f9dc 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4856      	ldr	r0, [pc, #344]	; (80007d4 <display_led_7seg+0x380>)
 800067a:	f001 f9d6 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 800067e:	e0a4      	b.n	80007ca <display_led_7seg+0x376>
	case 6:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4853      	ldr	r0, [pc, #332]	; (80007d4 <display_led_7seg+0x380>)
 8000686:	f001 f9d0 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4851      	ldr	r0, [pc, #324]	; (80007d4 <display_led_7seg+0x380>)
 8000690:	f001 f9cb 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	484e      	ldr	r0, [pc, #312]	; (80007d4 <display_led_7seg+0x380>)
 800069c:	f001 f9c5 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	484b      	ldr	r0, [pc, #300]	; (80007d4 <display_led_7seg+0x380>)
 80006a8:	f001 f9bf 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	4848      	ldr	r0, [pc, #288]	; (80007d4 <display_led_7seg+0x380>)
 80006b4:	f001 f9b9 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006be:	4845      	ldr	r0, [pc, #276]	; (80007d4 <display_led_7seg+0x380>)
 80006c0:	f001 f9b3 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4842      	ldr	r0, [pc, #264]	; (80007d4 <display_led_7seg+0x380>)
 80006cc:	f001 f9ad 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80006d0:	e07b      	b.n	80007ca <display_led_7seg+0x376>
	case 7:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	483f      	ldr	r0, [pc, #252]	; (80007d4 <display_led_7seg+0x380>)
 80006d8:	f001 f9a7 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	483c      	ldr	r0, [pc, #240]	; (80007d4 <display_led_7seg+0x380>)
 80006e2:	f001 f9a2 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	4839      	ldr	r0, [pc, #228]	; (80007d4 <display_led_7seg+0x380>)
 80006ee:	f001 f99c 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4836      	ldr	r0, [pc, #216]	; (80007d4 <display_led_7seg+0x380>)
 80006fa:	f001 f996 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000704:	4833      	ldr	r0, [pc, #204]	; (80007d4 <display_led_7seg+0x380>)
 8000706:	f001 f990 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000710:	4830      	ldr	r0, [pc, #192]	; (80007d4 <display_led_7seg+0x380>)
 8000712:	f001 f98a 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <display_led_7seg+0x380>)
 800071e:	f001 f984 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000722:	e052      	b.n	80007ca <display_led_7seg+0x376>
	case 8:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <display_led_7seg+0x380>)
 800072a:	f001 f97e 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4828      	ldr	r0, [pc, #160]	; (80007d4 <display_led_7seg+0x380>)
 8000734:	f001 f979 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4825      	ldr	r0, [pc, #148]	; (80007d4 <display_led_7seg+0x380>)
 8000740:	f001 f973 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4822      	ldr	r0, [pc, #136]	; (80007d4 <display_led_7seg+0x380>)
 800074c:	f001 f96d 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000756:	481f      	ldr	r0, [pc, #124]	; (80007d4 <display_led_7seg+0x380>)
 8000758:	f001 f967 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <display_led_7seg+0x380>)
 8000764:	f001 f961 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <display_led_7seg+0x380>)
 8000770:	f001 f95b 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000774:	e029      	b.n	80007ca <display_led_7seg+0x376>
	case 9:
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_A_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4816      	ldr	r0, [pc, #88]	; (80007d4 <display_led_7seg+0x380>)
 800077c:	f001 f955 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_B_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <display_led_7seg+0x380>)
 8000786:	f001 f950 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_C_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	4810      	ldr	r0, [pc, #64]	; (80007d4 <display_led_7seg+0x380>)
 8000792:	f001 f94a 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_D_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <display_led_7seg+0x380>)
 800079e:	f001 f944 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_E_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <display_led_7seg+0x380>)
 80007aa:	f001 f93e 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_F_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <display_led_7seg+0x380>)
 80007b6:	f001 f938 	bl	8001a2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_7SEG_G_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <display_led_7seg+0x380>)
 80007c2:	f001 f932 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80007c6:	e000      	b.n	80007ca <display_led_7seg+0x376>
	default:
		break;
 80007c8:	bf00      	nop
	}
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010800 	.word	0x40010800

080007d8 <update_2_buffer_led_7seg_left>:

void update_2_buffer_led_7seg_left(int number1){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
		led_7_seg_buffer[0] = (number1/1000)/10;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <update_2_buffer_led_7seg_left+0x4c>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1312      	asrs	r2, r2, #12
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <update_2_buffer_led_7seg_left+0x50>)
 80007f0:	6013      	str	r3, [r2, #0]
		led_7_seg_buffer[1] = (number1/1000)%10;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <update_2_buffer_led_7seg_left+0x54>)
 80007f6:	fb82 1203 	smull	r1, r2, r2, r3
 80007fa:	1192      	asrs	r2, r2, #6
 80007fc:	17db      	asrs	r3, r3, #31
 80007fe:	1ad1      	subs	r1, r2, r3
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <update_2_buffer_led_7seg_left+0x58>)
 8000802:	fb83 2301 	smull	r2, r3, r3, r1
 8000806:	109a      	asrs	r2, r3, #2
 8000808:	17cb      	asrs	r3, r1, #31
 800080a:	1ad2      	subs	r2, r2, r3
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	1aca      	subs	r2, r1, r3
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <update_2_buffer_led_7seg_left+0x50>)
 8000818:	605a      	str	r2, [r3, #4]

}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	68db8bad 	.word	0x68db8bad
 8000828:	20000098 	.word	0x20000098
 800082c:	10624dd3 	.word	0x10624dd3
 8000830:	66666667 	.word	0x66666667

08000834 <update_2_buffer_led_7seg_right>:
void update_2_buffer_led_7seg_right(int number2){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
		led_7_seg_buffer[2] =( number2/1000)/10;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <update_2_buffer_led_7seg_right+0x4c>)
 8000840:	fb82 1203 	smull	r1, r2, r2, r3
 8000844:	1312      	asrs	r2, r2, #12
 8000846:	17db      	asrs	r3, r3, #31
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <update_2_buffer_led_7seg_right+0x50>)
 800084c:	6093      	str	r3, [r2, #8]
		led_7_seg_buffer[3] = ( number2/1000)%10;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <update_2_buffer_led_7seg_right+0x54>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1192      	asrs	r2, r2, #6
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad1      	subs	r1, r2, r3
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <update_2_buffer_led_7seg_right+0x58>)
 800085e:	fb83 2301 	smull	r2, r3, r3, r1
 8000862:	109a      	asrs	r2, r3, #2
 8000864:	17cb      	asrs	r3, r1, #31
 8000866:	1ad2      	subs	r2, r2, r3
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	1aca      	subs	r2, r1, r3
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <update_2_buffer_led_7seg_right+0x50>)
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	68db8bad 	.word	0x68db8bad
 8000884:	20000098 	.word	0x20000098
 8000888:	10624dd3 	.word	0x10624dd3
 800088c:	66666667 	.word	0x66666667

08000890 <led_7seg_run>:
void led_7seg_run(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	// enable the ENi pin ( when index = 0, EN0 = RESET ...);
	turn_on_led_7seg(index_led_7_seg);
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <led_7seg_run+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd59 	bl	8000350 <turn_on_led_7seg>
	display_led_7seg(led_7_seg_buffer[index_led_7_seg]);
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <led_7seg_run+0x50>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <led_7seg_run+0x54>)
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fdd3 	bl	8000454 <display_led_7seg>
	//switch index after 500ms, index increase 1 and index assign 0 when index = 4;
	if(is_timer_timeout(3)){
 80008ae:	2003      	movs	r0, #3
 80008b0:	f000 fa80 	bl	8000db4 <is_timer_timeout>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d010      	beq.n	80008dc <led_7seg_run+0x4c>
		index_led_7_seg= (index_led_7_seg+1)%4;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <led_7seg_run+0x50>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	425a      	negs	r2, r3
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	f002 0203 	and.w	r2, r2, #3
 80008ca:	bf58      	it	pl
 80008cc:	4253      	negpl	r3, r2
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <led_7seg_run+0x50>)
 80008d0:	6013      	str	r3, [r2, #0]
		set_timer(3, 500);
 80008d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008d6:	2003      	movs	r0, #3
 80008d8:	f000 fa26 	bl	8000d28 <set_timer>
	}
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	20000098 	.word	0x20000098

080008e8 <turn_on_traffic_led_1>:
 */

#include <led_traffic.h>


void turn_on_traffic_led_1(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <turn_on_traffic_led_1+0x80>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b0c      	cmp	r3, #12
 80008f2:	d026      	beq.n	8000942 <turn_on_traffic_led_1+0x5a>
 80008f4:	2b0c      	cmp	r3, #12
 80008f6:	dc34      	bgt.n	8000962 <turn_on_traffic_led_1+0x7a>
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	d002      	beq.n	8000902 <turn_on_traffic_led_1+0x1a>
 80008fc:	2b0b      	cmp	r3, #11
 80008fe:	d010      	beq.n	8000922 <turn_on_traffic_led_1+0x3a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, RESET);
		break;
		default:
		break;
 8000900:	e02f      	b.n	8000962 <turn_on_traffic_led_1+0x7a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2101      	movs	r1, #1
 8000906:	4819      	ldr	r0, [pc, #100]	; (800096c <turn_on_traffic_led_1+0x84>)
 8000908:	f001 f88f 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2102      	movs	r1, #2
 8000910:	4816      	ldr	r0, [pc, #88]	; (800096c <turn_on_traffic_led_1+0x84>)
 8000912:	f001 f88a 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2104      	movs	r1, #4
 800091a:	4814      	ldr	r0, [pc, #80]	; (800096c <turn_on_traffic_led_1+0x84>)
 800091c:	f001 f885 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000920:	e020      	b.n	8000964 <turn_on_traffic_led_1+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2101      	movs	r1, #1
 8000926:	4811      	ldr	r0, [pc, #68]	; (800096c <turn_on_traffic_led_1+0x84>)
 8000928:	f001 f87f 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2102      	movs	r1, #2
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <turn_on_traffic_led_1+0x84>)
 8000932:	f001 f87a 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2104      	movs	r1, #4
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <turn_on_traffic_led_1+0x84>)
 800093c:	f001 f875 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000940:	e010      	b.n	8000964 <turn_on_traffic_led_1+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2101      	movs	r1, #1
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <turn_on_traffic_led_1+0x84>)
 8000948:	f001 f86f 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2102      	movs	r1, #2
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <turn_on_traffic_led_1+0x84>)
 8000952:	f001 f86a 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2104      	movs	r1, #4
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <turn_on_traffic_led_1+0x84>)
 800095c:	f001 f865 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 8000960:	e000      	b.n	8000964 <turn_on_traffic_led_1+0x7c>
		break;
 8000962:	bf00      	nop
	}
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000003c 	.word	0x2000003c
 800096c:	40010800 	.word	0x40010800

08000970 <turn_on_traffic_led_2>:
void turn_on_traffic_led_2(){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <turn_on_traffic_led_2+0x80>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b0c      	cmp	r3, #12
 800097a:	d026      	beq.n	80009ca <turn_on_traffic_led_2+0x5a>
 800097c:	2b0c      	cmp	r3, #12
 800097e:	dc34      	bgt.n	80009ea <turn_on_traffic_led_2+0x7a>
 8000980:	2b0a      	cmp	r3, #10
 8000982:	d002      	beq.n	800098a <turn_on_traffic_led_2+0x1a>
 8000984:	2b0b      	cmp	r3, #11
 8000986:	d010      	beq.n	80009aa <turn_on_traffic_led_2+0x3a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, RESET);
		break;
		default:
		break;
 8000988:	e02f      	b.n	80009ea <turn_on_traffic_led_2+0x7a>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 8000990:	f001 f84b 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2110      	movs	r1, #16
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 800099a:	f001 f846 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2120      	movs	r1, #32
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009a4:	f001 f841 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80009a8:	e020      	b.n	80009ec <turn_on_traffic_led_2+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2108      	movs	r1, #8
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009b0:	f001 f83b 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	480e      	ldr	r0, [pc, #56]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009ba:	f001 f836 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009c4:	f001 f831 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80009c8:	e010      	b.n	80009ec <turn_on_traffic_led_2+0x7c>
			HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009d0:	f001 f82b 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2110      	movs	r1, #16
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009da:	f001 f826 	bl	8001a2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <turn_on_traffic_led_2+0x84>)
 80009e4:	f001 f821 	bl	8001a2a <HAL_GPIO_WritePin>
		break;
 80009e8:	e000      	b.n	80009ec <turn_on_traffic_led_2+0x7c>
		break;
 80009ea:	bf00      	nop
	}
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000040 	.word	0x20000040
 80009f4:	40010800 	.word	0x40010800

080009f8 <blinkind_led_traffic_1>:

void blinkind_led_traffic_1(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <blinkind_led_traffic_1+0x7c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b0c      	cmp	r3, #12
 8000a02:	d024      	beq.n	8000a4e <blinkind_led_traffic_1+0x56>
 8000a04:	2b0c      	cmp	r3, #12
 8000a06:	dc31      	bgt.n	8000a6c <blinkind_led_traffic_1+0x74>
 8000a08:	2b0a      	cmp	r3, #10
 8000a0a:	d002      	beq.n	8000a12 <blinkind_led_traffic_1+0x1a>
 8000a0c:	2b0b      	cmp	r3, #11
 8000a0e:	d00f      	beq.n	8000a30 <blinkind_led_traffic_1+0x38>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1_Pin);
			break;
			default:
			break;
 8000a10:	e02c      	b.n	8000a6c <blinkind_led_traffic_1+0x74>
				HAL_GPIO_TogglePin(GPIOA, LED_RED_1_Pin);
 8000a12:	2101      	movs	r1, #1
 8000a14:	4818      	ldr	r0, [pc, #96]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a16:	f001 f820 	bl	8001a5a <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4816      	ldr	r0, [pc, #88]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a20:	f001 f803 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2104      	movs	r1, #4
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a2a:	f000 fffe 	bl	8001a2a <HAL_GPIO_WritePin>
			break;
 8000a2e:	e01e      	b.n	8000a6e <blinkind_led_traffic_1+0x76>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2104      	movs	r1, #4
 8000a34:	4810      	ldr	r0, [pc, #64]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a36:	f000 fff8 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_1_Pin);
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a3e:	f001 f80c 	bl	8001a5a <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2101      	movs	r1, #1
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a48:	f000 ffef 	bl	8001a2a <HAL_GPIO_WritePin>
			break;
 8000a4c:	e00f      	b.n	8000a6e <blinkind_led_traffic_1+0x76>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a54:	f000 ffe9 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a5e:	f000 ffe4 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_1_Pin);
 8000a62:	2104      	movs	r1, #4
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <blinkind_led_traffic_1+0x80>)
 8000a66:	f000 fff8 	bl	8001a5a <HAL_GPIO_TogglePin>
			break;
 8000a6a:	e000      	b.n	8000a6e <blinkind_led_traffic_1+0x76>
			break;
 8000a6c:	bf00      	nop
		}
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000003c 	.word	0x2000003c
 8000a78:	40010800 	.word	0x40010800

08000a7c <blinkind_led_traffic_2>:

void blinkind_led_traffic_2(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <blinkind_led_traffic_2+0x7c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b0c      	cmp	r3, #12
 8000a86:	d024      	beq.n	8000ad2 <blinkind_led_traffic_2+0x56>
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	dc31      	bgt.n	8000af0 <blinkind_led_traffic_2+0x74>
 8000a8c:	2b0a      	cmp	r3, #10
 8000a8e:	d002      	beq.n	8000a96 <blinkind_led_traffic_2+0x1a>
 8000a90:	2b0b      	cmp	r3, #11
 8000a92:	d00f      	beq.n	8000ab4 <blinkind_led_traffic_2+0x38>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
			break;
			default:
			break;
 8000a94:	e02c      	b.n	8000af0 <blinkind_led_traffic_2+0x74>
				HAL_GPIO_TogglePin(GPIOA, LED_RED_2_Pin);
 8000a96:	2108      	movs	r1, #8
 8000a98:	4818      	ldr	r0, [pc, #96]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000a9a:	f000 ffde 	bl	8001a5a <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000aa4:	f000 ffc1 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2120      	movs	r1, #32
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000aae:	f000 ffbc 	bl	8001a2a <HAL_GPIO_WritePin>
			break;
 8000ab2:	e01e      	b.n	8000af2 <blinkind_led_traffic_2+0x76>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_2_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000aba:	f000 ffb6 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_2_Pin);
 8000abe:	2110      	movs	r1, #16
 8000ac0:	480e      	ldr	r0, [pc, #56]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000ac2:	f000 ffca 	bl	8001a5a <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2108      	movs	r1, #8
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000acc:	f000 ffad 	bl	8001a2a <HAL_GPIO_WritePin>
			break;
 8000ad0:	e00f      	b.n	8000af2 <blinkind_led_traffic_2+0x76>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin, SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000ad8:	f000 ffa7 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin, SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000ae2:	f000 ffa2 	bl	8001a2a <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_2_Pin);
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <blinkind_led_traffic_2+0x80>)
 8000aea:	f000 ffb6 	bl	8001a5a <HAL_GPIO_TogglePin>
			break;
 8000aee:	e000      	b.n	8000af2 <blinkind_led_traffic_2+0x76>
			break;
 8000af0:	bf00      	nop
		}
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000040 	.word	0x20000040
 8000afc:	40010800 	.word	0x40010800

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b04:	f000 fc90 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b08:	f000 f814 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0c:	f000 f89a 	bl	8000c44 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b10:	f000 f84c 	bl	8000bac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <main+0x30>)
 8000b16:	f001 fbe5 	bl	80022e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  set_timer(3, 100);
 8000b1a:	2164      	movs	r1, #100	; 0x64
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f903 	bl	8000d28 <set_timer>
  while (1)
  {

	  fsm_for_button();
 8000b22:	f7ff fba7 	bl	8000274 <fsm_for_button>
	  led_7seg_run();
 8000b26:	f7ff feb3 	bl	8000890 <led_7seg_run>
	  fsm_system_run();
 8000b2a:	f000 fac3 	bl	80010b4 <fsm_system_run>
	  fsm_for_button();
 8000b2e:	e7f8      	b.n	8000b22 <main+0x22>
 8000b30:	200000fc 	.word	0x200000fc

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	; 0x40
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2228      	movs	r2, #40	; 0x28
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 ff8a 	bl	8002a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0318 	add.w	r3, r7, #24
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 ff8e 	bl	8001a8c <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b76:	f000 f8d1 	bl	8000d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f9fa 	bl	8001f8c <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f8bd 	bl	8000d1c <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3740      	adds	r7, #64	; 0x40
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bd2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000be0:	2209      	movs	r2, #9
 8000be2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bf2:	f001 fb27 	bl	8002244 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bfc:	f000 f88e 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000c0e:	f001 fcbd 	bl	800258c <HAL_TIM_ConfigClockSource>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c18:	f000 f880 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000c2a:	f001 fe89 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 f872 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000fc 	.word	0x200000fc

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0xb4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000c8e:	481b      	ldr	r0, [pc, #108]	; (8000cfc <MX_GPIO_Init+0xb8>)
 8000c90:	f000 fecb 	bl	8001a2a <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_7SEG_A_Pin|LED_7SEG_B_Pin
                          |LED_7SEG_C_Pin|LED_7SEG_D_Pin|LED_7SEG_E_Pin|LED_7SEG_F_Pin
                          |LED_7SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2178      	movs	r1, #120	; 0x78
 8000c98:	4819      	ldr	r0, [pc, #100]	; (8000d00 <MX_GPIO_Init+0xbc>)
 8000c9a:	f000 fec6 	bl	8001a2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin LED_7SEG_A_Pin LED_7SEG_B_Pin
                           LED_7SEG_C_Pin LED_7SEG_D_Pin LED_7SEG_E_Pin LED_7SEG_F_Pin
                           LED_7SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000c9e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ca2:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|LED_7SEG_A_Pin|LED_7SEG_B_Pin
                          |LED_7SEG_C_Pin|LED_7SEG_D_Pin|LED_7SEG_E_Pin|LED_7SEG_F_Pin
                          |LED_7SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_GPIO_Init+0xb8>)
 8000cb8:	f000 fd26 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0xbc>)
 8000cd0:	f000 fd1a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000cd4:	2378      	movs	r3, #120	; 0x78
 8000cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_GPIO_Init+0xbc>)
 8000cec:	f000 fd0c 	bl	8001708 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000d0c:	f000 f86c 	bl	8000de8 <timer_run>
	read_input();
 8000d10:	f7ff fa3a 	bl	8000188 <read_input>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <set_timer>:
#include "software_timer.h"

int timer_counter[NUMBER_OF_TIMER] = {0};
int timer_flag[NUMBER_OF_TIMER] = {0};

void set_timer(int index, int duration){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <set_timer+0x2c>)
 8000d36:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3a:	1092      	asrs	r2, r2, #2
 8000d3c:	17db      	asrs	r3, r3, #31
 8000d3e:	1ad2      	subs	r2, r2, r3
 8000d40:	4905      	ldr	r1, [pc, #20]	; (8000d58 <set_timer+0x30>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	66666667 	.word	0x66666667
 8000d58:	200000ac 	.word	0x200000ac

08000d5c <clear_timer>:
void clear_timer(int index){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <clear_timer+0x28>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <clear_timer+0x2c>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2100      	movs	r1, #0
 8000d74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000ac 	.word	0x200000ac
 8000d88:	200000d4 	.word	0x200000d4

08000d8c <get_time_of_counter>:


int get_time_of_counter(int index){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	return timer_counter[index]*TIME_CYCLE;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <get_time_of_counter+0x24>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200000ac 	.word	0x200000ac

08000db4 <is_timer_timeout>:


int is_timer_timeout(int index){
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <is_timer_timeout+0x30>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <is_timer_timeout+0x22>
		timer_flag[index] = 0;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <is_timer_timeout+0x30>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <is_timer_timeout+0x24>
	}
	return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200000d4 	.word	0x200000d4

08000de8 <timer_run>:
void timer_run(){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e01c      	b.n	8000e2e <timer_run+0x46>
		if(timer_counter[i] > 0){
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <timer_run+0x58>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dd13      	ble.n	8000e28 <timer_run+0x40>
			timer_counter[i]--;
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <timer_run+0x58>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	1e5a      	subs	r2, r3, #1
 8000e0a:	490d      	ldr	r1, [pc, #52]	; (8000e40 <timer_run+0x58>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <timer_run+0x58>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dc04      	bgt.n	8000e28 <timer_run+0x40>
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <timer_run+0x5c>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2101      	movs	r1, #1
 8000e24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b09      	cmp	r3, #9
 8000e32:	dddf      	ble.n	8000df4 <timer_run+0xc>
		}
	}
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	200000ac 	.word	0x200000ac
 8000e44:	200000d4 	.word	0x200000d4

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_MspInit+0x60>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_MspInit+0x60>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010000 	.word	0x40010000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ebc:	d113      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201c      	movs	r0, #28
 8000edc:	f000 fbdd 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f000 fbf6 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3a:	f000 fabb 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM2_IRQHandler+0x10>)
 8000f4a:	f001 fa17 	bl	800237c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000fc 	.word	0x200000fc

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <fsm_traffic_1_run>:


#include "traffic_fsm.h"


void fsm_traffic_1_run(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <fsm_traffic_1_run+0x98>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b0c      	cmp	r3, #12
 8000f6e:	d02a      	beq.n	8000fc6 <fsm_traffic_1_run+0x62>
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	dc3a      	bgt.n	8000fea <fsm_traffic_1_run+0x86>
 8000f74:	2b0a      	cmp	r3, #10
 8000f76:	d002      	beq.n	8000f7e <fsm_traffic_1_run+0x1a>
 8000f78:	2b0b      	cmp	r3, #11
 8000f7a:	d012      	beq.n	8000fa2 <fsm_traffic_1_run+0x3e>
				state_led_traffic_1 = YELLOW;
				set_timer(4,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000f7c:	e035      	b.n	8000fea <fsm_traffic_1_run+0x86>
			turn_on_traffic_led_1();
 8000f7e:	f7ff fcb3 	bl	80008e8 <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 8000f82:	2004      	movs	r0, #4
 8000f84:	f7ff ff16 	bl	8000db4 <is_timer_timeout>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d02f      	beq.n	8000fee <fsm_traffic_1_run+0x8a>
				state_led_traffic_1 =GREEN;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <fsm_traffic_1_run+0x98>)
 8000f90:	220c      	movs	r2, #12
 8000f92:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_GREEN);
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <fsm_traffic_1_run+0x9c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f7ff fec4 	bl	8000d28 <set_timer>
		break;
 8000fa0:	e025      	b.n	8000fee <fsm_traffic_1_run+0x8a>
			turn_on_traffic_led_1();
 8000fa2:	f7ff fca1 	bl	80008e8 <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 8000fa6:	2004      	movs	r0, #4
 8000fa8:	f7ff ff04 	bl	8000db4 <is_timer_timeout>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d01f      	beq.n	8000ff2 <fsm_traffic_1_run+0x8e>
				state_led_traffic_1 = RED;
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <fsm_traffic_1_run+0x98>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_RED);
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <fsm_traffic_1_run+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2004      	movs	r0, #4
 8000fc0:	f7ff feb2 	bl	8000d28 <set_timer>
		break;
 8000fc4:	e015      	b.n	8000ff2 <fsm_traffic_1_run+0x8e>
			turn_on_traffic_led_1();
 8000fc6:	f7ff fc8f 	bl	80008e8 <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f7ff fef2 	bl	8000db4 <is_timer_timeout>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00f      	beq.n	8000ff6 <fsm_traffic_1_run+0x92>
				state_led_traffic_1 = YELLOW;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <fsm_traffic_1_run+0x98>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_YELLOW);
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <fsm_traffic_1_run+0xa4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2004      	movs	r0, #4
 8000fe4:	f7ff fea0 	bl	8000d28 <set_timer>
		break;
 8000fe8:	e005      	b.n	8000ff6 <fsm_traffic_1_run+0x92>
		break;
 8000fea:	bf00      	nop
 8000fec:	e004      	b.n	8000ff8 <fsm_traffic_1_run+0x94>
		break;
 8000fee:	bf00      	nop
 8000ff0:	e002      	b.n	8000ff8 <fsm_traffic_1_run+0x94>
		break;
 8000ff2:	bf00      	nop
 8000ff4:	e000      	b.n	8000ff8 <fsm_traffic_1_run+0x94>
		break;
 8000ff6:	bf00      	nop
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000003c 	.word	0x2000003c
 8001000:	2000004c 	.word	0x2000004c
 8001004:	20000044 	.word	0x20000044
 8001008:	20000048 	.word	0x20000048

0800100c <fsm_traffic_2_run>:


void fsm_traffic_2_run(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <fsm_traffic_2_run+0x98>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b0c      	cmp	r3, #12
 8001016:	d02a      	beq.n	800106e <fsm_traffic_2_run+0x62>
 8001018:	2b0c      	cmp	r3, #12
 800101a:	dc3a      	bgt.n	8001092 <fsm_traffic_2_run+0x86>
 800101c:	2b0a      	cmp	r3, #10
 800101e:	d002      	beq.n	8001026 <fsm_traffic_2_run+0x1a>
 8001020:	2b0b      	cmp	r3, #11
 8001022:	d012      	beq.n	800104a <fsm_traffic_2_run+0x3e>
				state_led_traffic_2 = YELLOW;
				set_timer(5,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8001024:	e035      	b.n	8001092 <fsm_traffic_2_run+0x86>
			turn_on_traffic_led_2();
 8001026:	f7ff fca3 	bl	8000970 <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 800102a:	2005      	movs	r0, #5
 800102c:	f7ff fec2 	bl	8000db4 <is_timer_timeout>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02f      	beq.n	8001096 <fsm_traffic_2_run+0x8a>
				state_led_traffic_2 = GREEN;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <fsm_traffic_2_run+0x98>)
 8001038:	220c      	movs	r2, #12
 800103a:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_GREEN);
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <fsm_traffic_2_run+0x9c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	2005      	movs	r0, #5
 8001044:	f7ff fe70 	bl	8000d28 <set_timer>
		break;
 8001048:	e025      	b.n	8001096 <fsm_traffic_2_run+0x8a>
			turn_on_traffic_led_2();
 800104a:	f7ff fc91 	bl	8000970 <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 800104e:	2005      	movs	r0, #5
 8001050:	f7ff feb0 	bl	8000db4 <is_timer_timeout>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d01f      	beq.n	800109a <fsm_traffic_2_run+0x8e>
				state_led_traffic_2 = RED;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <fsm_traffic_2_run+0x98>)
 800105c:	220a      	movs	r2, #10
 800105e:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_RED);
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <fsm_traffic_2_run+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff fe5e 	bl	8000d28 <set_timer>
		break;
 800106c:	e015      	b.n	800109a <fsm_traffic_2_run+0x8e>
			turn_on_traffic_led_2();
 800106e:	f7ff fc7f 	bl	8000970 <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff fe9e 	bl	8000db4 <is_timer_timeout>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00f      	beq.n	800109e <fsm_traffic_2_run+0x92>
				state_led_traffic_2 = YELLOW;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <fsm_traffic_2_run+0x98>)
 8001080:	220b      	movs	r2, #11
 8001082:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_YELLOW);
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <fsm_traffic_2_run+0xa4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	2005      	movs	r0, #5
 800108c:	f7ff fe4c 	bl	8000d28 <set_timer>
		break;
 8001090:	e005      	b.n	800109e <fsm_traffic_2_run+0x92>
		break;
 8001092:	bf00      	nop
 8001094:	e004      	b.n	80010a0 <fsm_traffic_2_run+0x94>
		break;
 8001096:	bf00      	nop
 8001098:	e002      	b.n	80010a0 <fsm_traffic_2_run+0x94>
		break;
 800109a:	bf00      	nop
 800109c:	e000      	b.n	80010a0 <fsm_traffic_2_run+0x94>
		break;
 800109e:	bf00      	nop
	}
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000040 	.word	0x20000040
 80010a8:	2000004c 	.word	0x2000004c
 80010ac:	20000044 	.word	0x20000044
 80010b0:	20000048 	.word	0x20000048

080010b4 <fsm_system_run>:


void fsm_system_run(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	switch(mode){
 80010b8:	4bbf      	ldr	r3, [pc, #764]	; (80013b8 <fsm_system_run+0x304>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f200 816f 	bhi.w	80013a0 <fsm_system_run+0x2ec>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <fsm_system_run+0x14>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001113 	.word	0x08001113
 80010d0:	0800117f 	.word	0x0800117f
 80010d4:	08001235 	.word	0x08001235
 80010d8:	080012e9 	.word	0x080012e9
		case INIT_SYSTEM:

			state_led_traffic_1 = RED;
 80010dc:	4bb7      	ldr	r3, [pc, #732]	; (80013bc <fsm_system_run+0x308>)
 80010de:	220a      	movs	r2, #10
 80010e0:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = GREEN;
 80010e2:	4bb7      	ldr	r3, [pc, #732]	; (80013c0 <fsm_system_run+0x30c>)
 80010e4:	220c      	movs	r2, #12
 80010e6:	601a      	str	r2, [r3, #0]
			set_timer(3, 500);
 80010e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010ec:	2003      	movs	r0, #3
 80010ee:	f7ff fe1b 	bl	8000d28 <set_timer>
			set_timer(4, duration_time_of_RED);
 80010f2:	4bb4      	ldr	r3, [pc, #720]	; (80013c4 <fsm_system_run+0x310>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	2004      	movs	r0, #4
 80010fa:	f7ff fe15 	bl	8000d28 <set_timer>
			set_timer(5, duration_time_of_GREEN);
 80010fe:	4bb2      	ldr	r3, [pc, #712]	; (80013c8 <fsm_system_run+0x314>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	2005      	movs	r0, #5
 8001106:	f7ff fe0f 	bl	8000d28 <set_timer>
			//STATE STRANSITION
			mode = NORMAL_MODE;
 800110a:	4bab      	ldr	r3, [pc, #684]	; (80013b8 <fsm_system_run+0x304>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
		break;
 8001110:	e14f      	b.n	80013b2 <fsm_system_run+0x2fe>
		case NORMAL_MODE:

			fsm_traffic_1_run();
 8001112:	f7ff ff27 	bl	8000f64 <fsm_traffic_1_run>
			fsm_traffic_2_run();
 8001116:	f7ff ff79 	bl	800100c <fsm_traffic_2_run>
			update_2_buffer_led_7seg_left(get_time_of_counter(4));
 800111a:	2004      	movs	r0, #4
 800111c:	f7ff fe36 	bl	8000d8c <get_time_of_counter>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fb58 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(get_time_of_counter(5));
 8001128:	2005      	movs	r0, #5
 800112a:	f7ff fe2f 	bl	8000d8c <get_time_of_counter>
 800112e:	4603      	mov	r3, r0
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fb7f 	bl	8000834 <update_2_buffer_led_7seg_right>
			//STATE STRANSITION
			//button 0 is pressed,  NORMAl_MODE -> MODIFY_RED_MODE
			if(is_pressed(0)){
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff f808 	bl	800014c <is_pressed>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8130 	beq.w	80013a4 <fsm_system_run+0x2f0>
				clear_timer(4);
 8001144:	2004      	movs	r0, #4
 8001146:	f7ff fe09 	bl	8000d5c <clear_timer>
				clear_timer(5);
 800114a:	2005      	movs	r0, #5
 800114c:	f7ff fe06 	bl	8000d5c <clear_timer>
				state_led_traffic_1 = RED;
 8001150:	4b9a      	ldr	r3, [pc, #616]	; (80013bc <fsm_system_run+0x308>)
 8001152:	220a      	movs	r2, #10
 8001154:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = RED;
 8001156:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <fsm_system_run+0x30c>)
 8001158:	220a      	movs	r2, #10
 800115a:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 800115c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001160:	2006      	movs	r0, #6
 8001162:	f7ff fde1 	bl	8000d28 <set_timer>
				turn_on_traffic_led_1();
 8001166:	f7ff fbbf 	bl	80008e8 <turn_on_traffic_led_1>
				turn_on_traffic_led_2();
 800116a:	f7ff fc01 	bl	8000970 <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_RED;
 800116e:	4b95      	ldr	r3, [pc, #596]	; (80013c4 <fsm_system_run+0x310>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a96      	ldr	r2, [pc, #600]	; (80013cc <fsm_system_run+0x318>)
 8001174:	6013      	str	r3, [r2, #0]
				mode = MODIFY_RED_MODE;
 8001176:	4b90      	ldr	r3, [pc, #576]	; (80013b8 <fsm_system_run+0x304>)
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
			}
		break;
 800117c:	e112      	b.n	80013a4 <fsm_system_run+0x2f0>
		case MODIFY_RED_MODE:

			update_2_buffer_led_7seg_left(mode*1000);
 800117e:	4b8e      	ldr	r3, [pc, #568]	; (80013b8 <fsm_system_run+0x304>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fb24 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(buffer_duration_time);
 8001190:	4b8e      	ldr	r3, [pc, #568]	; (80013cc <fsm_system_run+0x318>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb4d 	bl	8000834 <update_2_buffer_led_7seg_right>
			//blinking every 500ms
			if(is_timer_timeout(6)){
 800119a:	2006      	movs	r0, #6
 800119c:	f7ff fe0a 	bl	8000db4 <is_timer_timeout>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <fsm_system_run+0x104>
				blinkind_led_traffic_1();
 80011a6:	f7ff fc27 	bl	80009f8 <blinkind_led_traffic_1>
				blinkind_led_traffic_2();
 80011aa:	f7ff fc67 	bl	8000a7c <blinkind_led_traffic_2>
				set_timer(6, 500);
 80011ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011b2:	2006      	movs	r0, #6
 80011b4:	f7ff fdb8 	bl	8000d28 <set_timer>
			}
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(1)){
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7fe ffc7 	bl	800014c <is_pressed>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00f      	beq.n	80011e4 <fsm_system_run+0x130>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 80011c4:	4b81      	ldr	r3, [pc, #516]	; (80013cc <fsm_system_run+0x318>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <fsm_system_run+0x31c>)
 80011ce:	fb83 1302 	smull	r1, r3, r3, r2
 80011d2:	1359      	asrs	r1, r3, #13
 80011d4:	17d3      	asrs	r3, r2, #31
 80011d6:	1acb      	subs	r3, r1, r3
 80011d8:	497e      	ldr	r1, [pc, #504]	; (80013d4 <fsm_system_run+0x320>)
 80011da:	fb01 f303 	mul.w	r3, r1, r3
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <fsm_system_run+0x318>)
 80011e2:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(2)){
 80011e4:	2002      	movs	r0, #2
 80011e6:	f7fe ffb1 	bl	800014c <is_pressed>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <fsm_system_run+0x144>
				duration_time_of_RED = buffer_duration_time;
 80011f0:	4b76      	ldr	r3, [pc, #472]	; (80013cc <fsm_system_run+0x318>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a73      	ldr	r2, [pc, #460]	; (80013c4 <fsm_system_run+0x310>)
 80011f6:	6013      	str	r3, [r2, #0]
			}
			//STATE STRANSITION
			//button 0 is pressed, MODIFY_RED_MODE -> MODIFY_YELLOW_MODE
			if(is_pressed(0)){
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7fe ffa7 	bl	800014c <is_pressed>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80d1 	beq.w	80013a8 <fsm_system_run+0x2f4>
				state_led_traffic_1 = YELLOW;
 8001206:	4b6d      	ldr	r3, [pc, #436]	; (80013bc <fsm_system_run+0x308>)
 8001208:	220b      	movs	r2, #11
 800120a:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = YELLOW;
 800120c:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <fsm_system_run+0x30c>)
 800120e:	220b      	movs	r2, #11
 8001210:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 8001212:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001216:	2006      	movs	r0, #6
 8001218:	f7ff fd86 	bl	8000d28 <set_timer>
				turn_on_traffic_led_1();
 800121c:	f7ff fb64 	bl	80008e8 <turn_on_traffic_led_1>
				turn_on_traffic_led_2();
 8001220:	f7ff fba6 	bl	8000970 <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_YELLOW;
 8001224:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <fsm_system_run+0x324>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a68      	ldr	r2, [pc, #416]	; (80013cc <fsm_system_run+0x318>)
 800122a:	6013      	str	r3, [r2, #0]
				mode = MODIFY_YELLOW_MODE;
 800122c:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <fsm_system_run+0x304>)
 800122e:	2203      	movs	r2, #3
 8001230:	601a      	str	r2, [r3, #0]
			}
		break;
 8001232:	e0b9      	b.n	80013a8 <fsm_system_run+0x2f4>
		case MODIFY_YELLOW_MODE:

			update_2_buffer_led_7seg_left(mode*1000);
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <fsm_system_run+0x304>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fac9 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(buffer_duration_time);
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <fsm_system_run+0x318>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff faf2 	bl	8000834 <update_2_buffer_led_7seg_right>
			//blinking every 500ms
			if(is_timer_timeout(6)){
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fdaf 	bl	8000db4 <is_timer_timeout>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <fsm_system_run+0x1ba>
				blinkind_led_traffic_1();
 800125c:	f7ff fbcc 	bl	80009f8 <blinkind_led_traffic_1>
				blinkind_led_traffic_2();
 8001260:	f7ff fc0c 	bl	8000a7c <blinkind_led_traffic_2>
				set_timer(6, 500);
 8001264:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001268:	2006      	movs	r0, #6
 800126a:	f7ff fd5d 	bl	8000d28 <set_timer>
			}
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(1)){
 800126e:	2001      	movs	r0, #1
 8001270:	f7fe ff6c 	bl	800014c <is_pressed>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00f      	beq.n	800129a <fsm_system_run+0x1e6>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <fsm_system_run+0x318>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <fsm_system_run+0x31c>)
 8001284:	fb83 1302 	smull	r1, r3, r3, r2
 8001288:	1359      	asrs	r1, r3, #13
 800128a:	17d3      	asrs	r3, r2, #31
 800128c:	1acb      	subs	r3, r1, r3
 800128e:	4951      	ldr	r1, [pc, #324]	; (80013d4 <fsm_system_run+0x320>)
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <fsm_system_run+0x318>)
 8001298:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(2)){
 800129a:	2002      	movs	r0, #2
 800129c:	f7fe ff56 	bl	800014c <is_pressed>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <fsm_system_run+0x1fa>
				duration_time_of_YELLOW = buffer_duration_time;
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <fsm_system_run+0x318>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <fsm_system_run+0x324>)
 80012ac:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 0 is pressed,MODIFY_YELLOW_MODE  ->  MODIFY_GREEN_MODE
			if(is_pressed(0)){
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7fe ff4c 	bl	800014c <is_pressed>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d078      	beq.n	80013ac <fsm_system_run+0x2f8>
				state_led_traffic_1 = GREEN;
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <fsm_system_run+0x308>)
 80012bc:	220c      	movs	r2, #12
 80012be:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = GREEN;
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <fsm_system_run+0x30c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 80012c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012ca:	2006      	movs	r0, #6
 80012cc:	f7ff fd2c 	bl	8000d28 <set_timer>
				turn_on_traffic_led_1();
 80012d0:	f7ff fb0a 	bl	80008e8 <turn_on_traffic_led_1>
				turn_on_traffic_led_2();
 80012d4:	f7ff fb4c 	bl	8000970 <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_GREEN;
 80012d8:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <fsm_system_run+0x314>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a3b      	ldr	r2, [pc, #236]	; (80013cc <fsm_system_run+0x318>)
 80012de:	6013      	str	r3, [r2, #0]
				mode = MODIFY_GREEN_MODE;
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <fsm_system_run+0x304>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	601a      	str	r2, [r3, #0]
			}
		break;
 80012e6:	e061      	b.n	80013ac <fsm_system_run+0x2f8>
		case MODIFY_GREEN_MODE:

			update_2_buffer_led_7seg_left(mode*1000);
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <fsm_system_run+0x304>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fa6f 	bl	80007d8 <update_2_buffer_led_7seg_left>
			update_2_buffer_led_7seg_right(buffer_duration_time);
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <fsm_system_run+0x318>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fa98 	bl	8000834 <update_2_buffer_led_7seg_right>
			//blinking every 500ms
			if(is_timer_timeout(6)){
 8001304:	2006      	movs	r0, #6
 8001306:	f7ff fd55 	bl	8000db4 <is_timer_timeout>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <fsm_system_run+0x26e>
				blinkind_led_traffic_1();
 8001310:	f7ff fb72 	bl	80009f8 <blinkind_led_traffic_1>
				blinkind_led_traffic_2();
 8001314:	f7ff fbb2 	bl	8000a7c <blinkind_led_traffic_2>
				set_timer(6, 500);
 8001318:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff fd03 	bl	8000d28 <set_timer>
			}
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(1)){
 8001322:	2001      	movs	r0, #1
 8001324:	f7fe ff12 	bl	800014c <is_pressed>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00f      	beq.n	800134e <fsm_system_run+0x29a>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <fsm_system_run+0x318>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <fsm_system_run+0x31c>)
 8001338:	fb83 1302 	smull	r1, r3, r3, r2
 800133c:	1359      	asrs	r1, r3, #13
 800133e:	17d3      	asrs	r3, r2, #31
 8001340:	1acb      	subs	r3, r1, r3
 8001342:	4924      	ldr	r1, [pc, #144]	; (80013d4 <fsm_system_run+0x320>)
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a20      	ldr	r2, [pc, #128]	; (80013cc <fsm_system_run+0x318>)
 800134c:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(2)){
 800134e:	2002      	movs	r0, #2
 8001350:	f7fe fefc 	bl	800014c <is_pressed>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <fsm_system_run+0x2ae>
				duration_time_of_GREEN = buffer_duration_time;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <fsm_system_run+0x318>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <fsm_system_run+0x314>)
 8001360:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 0 is pressed, MODIFY_GREEN_MODE -> NORMAL_MODE
			if(is_pressed(0)){
 8001362:	2000      	movs	r0, #0
 8001364:	f7fe fef2 	bl	800014c <is_pressed>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d020      	beq.n	80013b0 <fsm_system_run+0x2fc>
				clear_timer(6);
 800136e:	2006      	movs	r0, #6
 8001370:	f7ff fcf4 	bl	8000d5c <clear_timer>
				state_led_traffic_1 = RED;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <fsm_system_run+0x308>)
 8001376:	220a      	movs	r2, #10
 8001378:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = GREEN;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <fsm_system_run+0x30c>)
 800137c:	220c      	movs	r2, #12
 800137e:	601a      	str	r2, [r3, #0]
				set_timer(4, duration_time_of_RED);
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <fsm_system_run+0x310>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	2004      	movs	r0, #4
 8001388:	f7ff fcce 	bl	8000d28 <set_timer>
				set_timer(5, duration_time_of_GREEN);
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <fsm_system_run+0x314>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	2005      	movs	r0, #5
 8001394:	f7ff fcc8 	bl	8000d28 <set_timer>
				mode = NORMAL_MODE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <fsm_system_run+0x304>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
			}
		break;
 800139e:	e007      	b.n	80013b0 <fsm_system_run+0x2fc>
		default:
		break;
 80013a0:	bf00      	nop
 80013a2:	e006      	b.n	80013b2 <fsm_system_run+0x2fe>
		break;
 80013a4:	bf00      	nop
 80013a6:	e004      	b.n	80013b2 <fsm_system_run+0x2fe>
		break;
 80013a8:	bf00      	nop
 80013aa:	e002      	b.n	80013b2 <fsm_system_run+0x2fe>
		break;
 80013ac:	bf00      	nop
 80013ae:	e000      	b.n	80013b2 <fsm_system_run+0x2fe>
		break;
 80013b0:	bf00      	nop
	}
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000094 	.word	0x20000094
 80013bc:	2000003c 	.word	0x2000003c
 80013c0:	20000040 	.word	0x20000040
 80013c4:	20000044 	.word	0x20000044
 80013c8:	2000004c 	.word	0x2000004c
 80013cc:	20000050 	.word	0x20000050
 80013d0:	14f8b589 	.word	0x14f8b589
 80013d4:	000186a0 	.word	0x000186a0
 80013d8:	20000048 	.word	0x20000048

080013dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013dc:	f7ff fdbc 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013e2:	490c      	ldr	r1, [pc, #48]	; (8001414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f8:	4c09      	ldr	r4, [pc, #36]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001406:	f001 fb05 	bl	8002a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140a:	f7ff fb79 	bl	8000b00 <main>
  bx lr
 800140e:	4770      	bx	lr
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001418:	08002ab0 	.word	0x08002ab0
  ldr r2, =_sbss
 800141c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001420:	20000148 	.word	0x20000148

08001424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_2_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x28>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x28>)
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f923 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fd00 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f93b 	bl	80016ee <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f903 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000054 	.word	0x20000054
 80014ac:	2000005c 	.word	0x2000005c
 80014b0:	20000058 	.word	0x20000058

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_IncTick+0x20>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	2000005c 	.word	0x2000005c
 80014d4:	20000144 	.word	0x20000144

080014d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <HAL_GetTick+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000144 	.word	0x20000144

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4906      	ldr	r1, [pc, #24]	; (8001584 <__NVIC_EnableIRQ+0x34>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff90 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff2d 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff42 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff90 	bl	80015dc <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5f 	bl	8001588 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff35 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e148      	b.n	80019ae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800171c:	2201      	movs	r2, #1
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8137 	bne.w	80019a8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4aa3      	ldr	r2, [pc, #652]	; (80019cc <HAL_GPIO_Init+0x2c4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d05e      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001744:	4aa1      	ldr	r2, [pc, #644]	; (80019cc <HAL_GPIO_Init+0x2c4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d875      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800174a:	4aa1      	ldr	r2, [pc, #644]	; (80019d0 <HAL_GPIO_Init+0x2c8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d058      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001750:	4a9f      	ldr	r2, [pc, #636]	; (80019d0 <HAL_GPIO_Init+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d86f      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001756:	4a9f      	ldr	r2, [pc, #636]	; (80019d4 <HAL_GPIO_Init+0x2cc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d052      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 800175c:	4a9d      	ldr	r2, [pc, #628]	; (80019d4 <HAL_GPIO_Init+0x2cc>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d869      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001762:	4a9d      	ldr	r2, [pc, #628]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04c      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001768:	4a9b      	ldr	r2, [pc, #620]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d863      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800176e:	4a9b      	ldr	r2, [pc, #620]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d046      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001774:	4a99      	ldr	r2, [pc, #612]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d85d      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d82a      	bhi.n	80017d4 <HAL_GPIO_Init+0xcc>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d859      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <HAL_GPIO_Init+0x80>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001803 	.word	0x08001803
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017ef 	.word	0x080017ef
 8001794:	08001831 	.word	0x08001831
 8001798:	08001837 	.word	0x08001837
 800179c:	08001837 	.word	0x08001837
 80017a0:	08001837 	.word	0x08001837
 80017a4:	08001837 	.word	0x08001837
 80017a8:	08001837 	.word	0x08001837
 80017ac:	08001837 	.word	0x08001837
 80017b0:	08001837 	.word	0x08001837
 80017b4:	08001837 	.word	0x08001837
 80017b8:	08001837 	.word	0x08001837
 80017bc:	08001837 	.word	0x08001837
 80017c0:	08001837 	.word	0x08001837
 80017c4:	08001837 	.word	0x08001837
 80017c8:	08001837 	.word	0x08001837
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	4a82      	ldr	r2, [pc, #520]	; (80019e0 <HAL_GPIO_Init+0x2d8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017da:	e02c      	b.n	8001836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e029      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e024      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e01f      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	330c      	adds	r3, #12
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e01a      	b.n	8001838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180a:	2304      	movs	r3, #4
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e013      	b.n	8001838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	611a      	str	r2, [r3, #16]
          break;
 8001822:	e009      	b.n	8001838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	615a      	str	r2, [r3, #20]
          break;
 800182e:	e003      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x130>
          break;
 8001836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d801      	bhi.n	8001842 <HAL_GPIO_Init+0x13a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_Init+0x13e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d802      	bhi.n	8001854 <HAL_GPIO_Init+0x14c>
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x152>
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3b08      	subs	r3, #8
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	210f      	movs	r1, #15
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	6a39      	ldr	r1, [r7, #32]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8090 	beq.w	80019a8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_GPIO_Init+0x2dc>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <HAL_GPIO_Init+0x2dc>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_GPIO_Init+0x2dc>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a0:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x2e0>)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_GPIO_Init+0x2e4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_Init+0x1e0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x1dc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_Init+0x1d8>
 80018dc:	2302      	movs	r3, #2
 80018de:	e004      	b.n	80018ea <HAL_GPIO_Init+0x1e2>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x1e2>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_GPIO_Init+0x1e2>
 80018e8:	2300      	movs	r3, #0
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	f002 0203 	and.w	r2, r2, #3
 80018f0:	0092      	lsls	r2, r2, #2
 80018f2:	4093      	lsls	r3, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018fa:	493b      	ldr	r1, [pc, #236]	; (80019e8 <HAL_GPIO_Init+0x2e0>)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4937      	ldr	r1, [pc, #220]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	4933      	ldr	r1, [pc, #204]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800192c:	4013      	ands	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	492d      	ldr	r1, [pc, #180]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4929      	ldr	r1, [pc, #164]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001954:	4013      	ands	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4923      	ldr	r1, [pc, #140]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	491f      	ldr	r1, [pc, #124]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800197c:	4013      	ands	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4919      	ldr	r1, [pc, #100]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4915      	ldr	r1, [pc, #84]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3301      	adds	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f47f aeaf 	bne.w	800171c <HAL_GPIO_Init+0x14>
  }
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	372c      	adds	r7, #44	; 0x2c
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	10320000 	.word	0x10320000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10220000 	.word	0x10220000
 80019d8:	10210000 	.word	0x10210000
 80019dc:	10120000 	.word	0x10120000
 80019e0:	10110000 	.word	0x10110000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	460b      	mov	r3, r1
 8001a34:	807b      	strh	r3, [r7, #2]
 8001a36:	4613      	mov	r3, r2
 8001a38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3a:	787b      	ldrb	r3, [r7, #1]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a40:	887a      	ldrh	r2, [r7, #2]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a46:	e003      	b.n	8001a50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	041a      	lsls	r2, r3, #16
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a6c:	887a      	ldrh	r2, [r7, #2]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	041a      	lsls	r2, r3, #16
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	611a      	str	r2, [r3, #16]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e26c      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8087 	beq.w	8001bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab8:	4b8f      	ldr	r3, [pc, #572]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d112      	bne.n	8001aea <HAL_RCC_OscConfig+0x5e>
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d06c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x12c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d168      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e246      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x76>
 8001af4:	4b80      	ldr	r3, [pc, #512]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a7f      	ldr	r2, [pc, #508]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e02e      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x98>
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7a      	ldr	r2, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e01d      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0xbc>
 8001b2e:	4b72      	ldr	r3, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a71      	ldr	r2, [pc, #452]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a6e      	ldr	r2, [pc, #440]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b48:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6a      	ldr	r2, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a67      	ldr	r2, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fcb6 	bl	80014d8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fcb2 	bl	80014d8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1fa      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe4>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fca2 	bl	80014d8 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fc9e 	bl	80014d8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1e6      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x10c>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd2:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d11c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x18c>
 8001bde:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x176>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e1ba      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4939      	ldr	r1, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	e03a      	b.n	8001c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff fc57 	bl	80014d8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fc53 	bl	80014d8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e19b      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4927      	ldr	r1, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fc36 	bl	80014d8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c70:	f7ff fc32 	bl	80014d8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e17a      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03a      	beq.n	8001d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d019      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fc16 	bl	80014d8 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fc12 	bl	80014d8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e15a      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f000 fa9a 	bl	8002208 <RCC_Delay>
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fbfc 	bl	80014d8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce2:	e00f      	b.n	8001d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fbf8 	bl	80014d8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d908      	bls.n	8001d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e140      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	42420000 	.word	0x42420000
 8001d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	4b9e      	ldr	r3, [pc, #632]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e9      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a6 	beq.w	8001e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d22:	4b97      	ldr	r3, [pc, #604]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b94      	ldr	r3, [pc, #592]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a93      	ldr	r2, [pc, #588]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b91      	ldr	r3, [pc, #580]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d56:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a8a      	ldr	r2, [pc, #552]	; (8001f84 <HAL_RCC_OscConfig+0x4f8>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fbb9 	bl	80014d8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff fbb5 	bl	80014d8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	; 0x64
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0fd      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <HAL_RCC_OscConfig+0x4f8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x312>
 8001d90:	4b7b      	ldr	r3, [pc, #492]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a7a      	ldr	r2, [pc, #488]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_OscConfig+0x36e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x334>
 8001da6:	4b76      	ldr	r3, [pc, #472]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a75      	ldr	r2, [pc, #468]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	e01c      	b.n	8001dfa <HAL_RCC_OscConfig+0x36e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x356>
 8001dc8:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a6c      	ldr	r2, [pc, #432]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x36e>
 8001de2:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a66      	ldr	r2, [pc, #408]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d015      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb69 	bl	80014d8 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb65 	bl	80014d8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0ab      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ee      	beq.n	8001e0a <HAL_RCC_OscConfig+0x37e>
 8001e2c:	e014      	b.n	8001e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fb53 	bl	80014d8 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff fb4f 	bl	80014d8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e095      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8081 	beq.w	8001f76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d061      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d146      	bne.n	8001f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_OscConfig+0x4fc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fb23 	bl	80014d8 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7ff fb1f 	bl	80014d8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e067      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d108      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	492d      	ldr	r1, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a19      	ldr	r1, [r3, #32]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	4927      	ldr	r1, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <HAL_RCC_OscConfig+0x4fc>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff faf3 	bl	80014d8 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff faef 	bl	80014d8 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e037      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x46a>
 8001f14:	e02f      	b.n	8001f76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCC_OscConfig+0x4fc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fadc 	bl	80014d8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff fad8 	bl	80014d8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e020      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x498>
 8001f42:	e018      	b.n	8001f76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e013      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
 8001f88:	42420060 	.word	0x42420060

08001f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0d0      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4965      	ldr	r1, [pc, #404]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0b8      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a58      	ldr	r2, [pc, #352]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800200a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b50      	ldr	r3, [pc, #320]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	494d      	ldr	r1, [pc, #308]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d040      	beq.n	80020ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e07f      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e073      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06b      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4936      	ldr	r1, [pc, #216]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800207c:	f7ff fa2c 	bl	80014d8 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7ff fa28 	bl	80014d8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e053      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 020c 	and.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1eb      	bne.n	8002084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d210      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4922      	ldr	r1, [pc, #136]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e032      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4916      	ldr	r1, [pc, #88]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211a:	f000 f821 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490a      	ldr	r1, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1cc>)
 8002134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f98a 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
 8002154:	08002a84 	.word	0x08002a84
 8002158:	20000054 	.word	0x20000054
 800215c:	20000058 	.word	0x20000058

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x30>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x36>
 800218e:	e027      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	613b      	str	r3, [r7, #16]
      break;
 8002194:	e027      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0c9b      	lsrs	r3, r3, #18
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0c5b      	lsrs	r3, r3, #17
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c2:	fb02 f203 	mul.w	r2, r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e004      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e6:	693b      	ldr	r3, [r7, #16]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	08002a94 	.word	0x08002a94
 8002200:	08002aa4 	.word	0x08002aa4
 8002204:	003d0900 	.word	0x003d0900

08002208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <RCC_Delay+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <RCC_Delay+0x38>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0a5b      	lsrs	r3, r3, #9
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002224:	bf00      	nop
  }
  while (Delay --);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	60fa      	str	r2, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <RCC_Delay+0x1c>
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000054 	.word	0x20000054
 8002240:	10624dd3 	.word	0x10624dd3

08002244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e041      	b.n	80022da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fe1e 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3304      	adds	r3, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f000 fa6e 	bl	8002764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d001      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e035      	b.n	8002368 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_TIM_Base_Start_IT+0x90>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_TIM_Base_Start_IT+0x4e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002326:	d004      	beq.n	8002332 <HAL_TIM_Base_Start_IT+0x4e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_TIM_Base_Start_IT+0x94>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d111      	bne.n	8002356 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b06      	cmp	r3, #6
 8002342:	d010      	beq.n	8002366 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002354:	e007      	b.n	8002366 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400

0800237c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0202 	mvn.w	r2, #2
 80023a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f9b4 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9a7 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f9b6 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0204 	mvn.w	r2, #4
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2202      	movs	r2, #2
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f98a 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f97d 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f98c 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b08      	cmp	r3, #8
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b08      	cmp	r3, #8
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0208 	mvn.w	r2, #8
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2204      	movs	r2, #4
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f960 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f953 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f962 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b10      	cmp	r3, #16
 800248c:	d122      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b10      	cmp	r3, #16
 800249a:	d11b      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0210 	mvn.w	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2208      	movs	r2, #8
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f936 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f929 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f938 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0201 	mvn.w	r2, #1
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fc02 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b80      	cmp	r3, #128	; 0x80
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa6b 	bl	8002a02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f8fc 	bl	8002750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b20      	cmp	r3, #32
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b20      	cmp	r3, #32
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0220 	mvn.w	r2, #32
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa36 	bl	80029f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0b4      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x186>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e0:	d03e      	beq.n	8002660 <HAL_TIM_ConfigClockSource+0xd4>
 80025e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e6:	f200 8087 	bhi.w	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ee:	f000 8086 	beq.w	80026fe <HAL_TIM_ConfigClockSource+0x172>
 80025f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f6:	d87f      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b70      	cmp	r3, #112	; 0x70
 80025fa:	d01a      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0xa6>
 80025fc:	2b70      	cmp	r3, #112	; 0x70
 80025fe:	d87b      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b60      	cmp	r3, #96	; 0x60
 8002602:	d050      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002604:	2b60      	cmp	r3, #96	; 0x60
 8002606:	d877      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b50      	cmp	r3, #80	; 0x50
 800260a:	d03c      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0xfa>
 800260c:	2b50      	cmp	r3, #80	; 0x50
 800260e:	d873      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d058      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d86f      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b30      	cmp	r3, #48	; 0x30
 800261a:	d064      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x15a>
 800261c:	2b30      	cmp	r3, #48	; 0x30
 800261e:	d86b      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b20      	cmp	r3, #32
 8002622:	d060      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002624:	2b20      	cmp	r3, #32
 8002626:	d867      	bhi.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05c      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x15a>
 800262c:	2b10      	cmp	r3, #16
 800262e:	d05a      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002630:	e062      	b.n	80026f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6899      	ldr	r1, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f000 f95e 	bl	8002902 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	609a      	str	r2, [r3, #8]
      break;
 800265e:	e04f      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f000 f947 	bl	8002902 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002682:	609a      	str	r2, [r3, #8]
      break;
 8002684:	e03c      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	461a      	mov	r2, r3
 8002694:	f000 f8be 	bl	8002814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2150      	movs	r1, #80	; 0x50
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f915 	bl	80028ce <TIM_ITRx_SetConfig>
      break;
 80026a4:	e02c      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 f8dc 	bl	8002870 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2160      	movs	r1, #96	; 0x60
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f905 	bl	80028ce <TIM_ITRx_SetConfig>
      break;
 80026c4:	e01c      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f000 f89e 	bl	8002814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2140      	movs	r1, #64	; 0x40
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f8f5 	bl	80028ce <TIM_ITRx_SetConfig>
      break;
 80026e4:	e00c      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f000 f8ec 	bl	80028ce <TIM_ITRx_SetConfig>
      break;
 80026f6:	e003      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      break;
 80026fc:	e000      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
	...

08002764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <TIM_Base_SetConfig+0xa8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <TIM_Base_SetConfig+0x28>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0x28>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a22      	ldr	r2, [pc, #136]	; (8002810 <TIM_Base_SetConfig+0xac>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1a      	ldr	r2, [pc, #104]	; (800280c <TIM_Base_SetConfig+0xa8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <TIM_Base_SetConfig+0x52>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0x52>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a17      	ldr	r2, [pc, #92]	; (8002810 <TIM_Base_SetConfig+0xac>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d108      	bne.n	80027c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <TIM_Base_SetConfig+0xa8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40000400 	.word	0x40000400

08002814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0201 	bic.w	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800283e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f023 030a 	bic.w	r3, r3, #10
 8002850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0210 	bic.w	r2, r3, #16
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800289a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	031b      	lsls	r3, r3, #12
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	621a      	str	r2, [r3, #32]
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f043 0307 	orr.w	r3, r3, #7
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800291c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	021a      	lsls	r2, r3, #8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4313      	orrs	r3, r2
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	609a      	str	r2, [r3, #8]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002954:	2302      	movs	r3, #2
 8002956:	e041      	b.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d004      	beq.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10c      	bne.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400

080029f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	2600      	movs	r6, #0
 8002a18:	4d0c      	ldr	r5, [pc, #48]	; (8002a4c <__libc_init_array+0x38>)
 8002a1a:	4c0d      	ldr	r4, [pc, #52]	; (8002a50 <__libc_init_array+0x3c>)
 8002a1c:	1b64      	subs	r4, r4, r5
 8002a1e:	10a4      	asrs	r4, r4, #2
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	f000 f822 	bl	8002a6c <_init>
 8002a28:	2600      	movs	r6, #0
 8002a2a:	4d0a      	ldr	r5, [pc, #40]	; (8002a54 <__libc_init_array+0x40>)
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	; (8002a58 <__libc_init_array+0x44>)
 8002a2e:	1b64      	subs	r4, r4, r5
 8002a30:	10a4      	asrs	r4, r4, #2
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	08002aa8 	.word	0x08002aa8
 8002a50:	08002aa8 	.word	0x08002aa8
 8002a54:	08002aa8 	.word	0x08002aa8
 8002a58:	08002aac 	.word	0x08002aac

08002a5c <memset>:
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4402      	add	r2, r0
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d100      	bne.n	8002a66 <memset+0xa>
 8002a64:	4770      	bx	lr
 8002a66:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6a:	e7f9      	b.n	8002a60 <memset+0x4>

08002a6c <_init>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	bf00      	nop
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr

08002a78 <_fini>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr
